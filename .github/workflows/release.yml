name: "Release"

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Build JSorolla
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm install
      - run: npm run build
      - uses: tyankatsu0105/read-package-version-actions@v1
        id: package
      - uses: actions/upload-artifact@v2
        with:
          name: jsorolla-release
          path: jsorolla-${{ steps.package.outputs.version }}.tar.gz
          retention-days: 1
      - uses: actions/upload-artifact@v2
        with:
          name: jsorolla-build
          path: build
          retention-days: 1

  release:
    name: Release JSorolla
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: jsorolla-release
      - uses: tyankatsu0105/read-package-version-actions@v1
        id: package
      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: ${{ contains(steps.package.outputs.version,'-') }}
          automatic_release_tag: "v${{ steps.package.outputs.version }}"
          title: "v${{ steps.package.outputs.version }}"
          prerelease: false
          files: |
            jsorolla-${{ steps.package.outputs.version }}.tar.gz
  
  docker:
    name: Publish JSorolla Docker
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: tyankatsu0105/read-package-version-actions@v1
        id: package
      - uses: actions/download-artifact@v2
        with:
          name: jsorolla-build
          path: build
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - run: python3 ./docker/docker-build.py push --images app --tag ${{ steps.package.outputs.version }}

  deploy:
    name: Deploy public JSorolla application
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: tyankatsu0105/read-package-version-actions@v1
        id: package
      - uses: actions/download-artifact@v2
        with:
          name: jsorolla-build
          path: build
      - uses: garygrossgarten/github-action-scp@release
        with:
          local: build
          remote: /mnt/data/WEB-APPS/dev/jsorolla-${{ steps.package.outputs.version }}
          rmRemote: true
          host: ${{ secrets.SSH_SWDEV_IP }}
          username: ${{ secrets.SSH_SWDEV_USER }}
          password: ${{ secrets.SSH_SWDEV_PASSWORD }}
