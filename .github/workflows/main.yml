name: "Develop CI/CD"

on:
  push:
    branches:
      - jsorolla-next
    tags:
      - "*"

jobs:
  build:
    name: JSorolla Build
    runs-on: ubuntu-20.04
    steps:
      - name: Clone Jsorolla
        uses: actions/checkout@v2
      - name: "Install node"
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # - name: Run npm ci
      #   run: npm ci --only-production --ignore-scripts
      - name: Run npm install
        run: npm install
      - name: Build Jsorolla
        run: npm run build
      - name: Upload rollup artifact
        uses: actions/upload-artifact@v2
        with:
          name: rollup-artifact
          path: build
          retention-days: 2

  test:
    name: Jsorolla tests
    if: "false"
    runs-on: ubuntu-20.04
    needs: build
    strategy:
      matrix:
        node-version: [16.x]
        browsers: [chrome, firefox]
    steps:
      - name: Clone Jsorolla repository
        uses: actions/checkout@v2
      - name: Install Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Run npm install
        run: npm install
      - name: Test IVA - Cypress run
        uses: cypress-io/github-action@v2
        with:
          start: npm run serve
          config-file: cypress/cypress.json
          browser: ${{ matrix.browsers }}
          spec: |
            cypress/integration/001-header-bar-pre-login.spec.js
            cypress/integration/002-login.js
          wait-on: http://localhost:3000
        env:
          cypress_username: demouser
          cypress_password: demouser
      - name: Upload Screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-${{ matrix.browsers }}_${{ matrix.node-version }}
          path: |
            cypress/screenshots
            cypress/videos
          retention-days: 2
  #      - name: Upload Video
  #        uses: actions/upload-artifact@v2
  #        if: always()
  #        with:
  #          name: cypress-videos-${{ matrix.browsers }}_${{ matrix.node-version }}
  #          path: cypress/videos
  #          retention-days: 2

  docker:
    name: Publish Docker image in Docker Hub repository
    if: "false"
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Download rollup artifact
        uses: actions/download-artifact@v2
        with:
          name: rollup-artifact
          path: build
      - name: Login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and publish Docker image
        run: python3 ./docker/docker-build.py push --images app --tag 2.2.0-exp

  deploy-ucam:
    name: Deploy Web App in UCam
    if: "false"
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Download Rollup artifact
        uses: actions/download-artifact@v2
        with:
          name: rollup-artifact
          path: build
      - id: package-version
        name: Read package.json
        uses: "tyankatsu0105/read-package-version-actions@v1"
      - name: Web Delivery
        uses: garygrossgarten/github-action-scp@release
        with:
          local: build
          remote: /mnt/data/WEB-APPS/dev/jsorolla-${{ steps.package-version.outputs.version }}
          rmRemote: true
          host: ${{ secrets.SSH_SWDEV_IP }}
          username: ${{ secrets.SSH_SWDEV_USER }}
          password: ${{ secrets.SSH_SWDEV_PASSWORD }}
