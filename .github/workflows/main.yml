name: "Main Workflow for JSorolla"

on:
  push:
    branches:
      - develop

jobs:
  build:
    name: JSorolla build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm install
      - run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: jsorolla-build
          path: build
          retention-days: 1

#  test:
#    name: JSorolla tests
#    if: "false"
#    runs-on: ubuntu-20.04
#    needs: build
#    strategy:
#      matrix:
#        node-version: [16.x]
#        browsers: [chrome, firefox]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v2
#        with:
#          node-version: ${{ matrix.node-version }}
#      - uses: actions/cache@v2
#        env:
#          cache-name: cache-node-modules
#        with:
#          # npm cache files are stored in `~/.npm` on Linux/macOS
#          path: ~/.npm
#          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-${{ env.cache-name }}-
#            ${{ runner.os }}-build-
#            ${{ runner.os }}-
#      - name: Run npm install
#        run: npm install
#      - name: Test IVA - Cypress run
#        uses: cypress-io/github-action@v2
#        with:
#          start: npm run serve
#          config-file: cypress/cypress.json
#          browser: ${{ matrix.browsers }}
#          spec: |
#            cypress/integration/001-header-bar-pre-login.spec.js
#            cypress/integration/002-login.js
#          wait-on: http://localhost:3000
#        env:
#          cypress_username: demouser
#          cypress_password: demouser
#      - name: Upload Screenshots
#        uses: actions/upload-artifact@v2
#        if: failure()
#        with:
#          name: cypress-${{ matrix.browsers }}_${{ matrix.node-version }}
#          path: |
#            cypress/screenshots
#            cypress/videos
#          retention-days: 2
#  #      - name: Upload Video
#  #        uses: actions/upload-artifact@v2
#  #        if: always()
#  #        with:
#  #          name: cypress-videos-${{ matrix.browsers }}_${{ matrix.node-version }}
#  #          path: cypress/videos
#  #          retention-days: 2

  docker:
    name: Publish Docker image
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v2
      - id: package
        uses: tyankatsu0105/read-package-version-actions@v1
      - uses: actions/download-artifact@v2
        with:
          name: jsorolla-build
          path: build
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - run: python3 ./docker/docker-build.py push --images app --tag ${{ steps.package.outputs.version }}

  deploy:
    name: Deploy development application
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: jsorolla-build
          path: build
      - id: package
        uses: tyankatsu0105/read-package-version-actions@v1
      - uses: garygrossgarten/github-action-scp@release
        with:
          local: build
          remote: /mnt/data/WEB-APPS/dev/jsorolla-${{ steps.package.outputs.version }}
          rmRemote: true
          host: ${{ secrets.SSH_SWDEV_IP }}
          username: ${{ secrets.SSH_SWDEV_USER }}
          password: ${{ secrets.SSH_SWDEV_PASSWORD }}
